@Pass

attribute vec3 position;

@vert{
  void main(){
    gl_Position = vec4(position,1);
  }
}

@frag{
  @{default:"-3.0"}
  uniform float fovyDepth;

  uniform vec2 _viewportSize;

  const float Epsilon = 0.001;

  struct Ray{
    vec3 origin;
    vec3 direction;
  };

  float sphereDist(vec3 p,float r){
    return length(p) - r;
  }

  float boxDist(vec3 p,vec3 b){
    return length(max(abs(p)-b,0.));
  }

  float sceneDist(vec3 p){
    return boxDist(p,vec3(3,3,3));
  }

  void main(){
    vec2 p = (gl_FragCoord.xy * 2.0 - _viewportSize) / min(_viewportSize.x,_viewportSize.y);
    Ray ray;
    ray.origin = vec3(0.0,0.0,5.0);
    ray.direction = normalize(vec3(p.x,p.y,fovyDepth));
    float dist,depth = 0.;
    vec3 hit = ray.origin;
    for(int i = 0; i < 64; i++){
      dist = sceneDist(hit);
      depth += dist;
      hit = ray.origin + dist * ray.direction;
      if(abs(dist) < Epsilon){
        gl_FragColor = vec4(1,0,1,1);
        break;
      }
    }

  }
}
