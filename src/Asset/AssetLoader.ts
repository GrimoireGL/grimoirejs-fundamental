import EEObject from "grimoirejs/lib/Base/EEObject";
/**
 * Provides managing all promise on initializing resources.
 */
class AssetLoader extends EEObject {
  /**
   * Promise count registered.
   * @type {number}
   */
  public registerCount: number = 0;
  /**
   * Promise count finished successfully.
   * @type {number}
   */
  public loadCount: number = 0;
  /**
   * Promise count completed(success and errored)
   * @type {number}
   */
  public completeCount: number = 0;
  /**
   * Promise count errored
   * @type {number}
   */
  public errorCount: number = 0;
  /**
   * Main promise to provide tasks for waiting for all resource loading.
   * @type {Promise<void>}
   */
  public promise: Promise<void> = new Promise<void>((resolve) => { this._resolve = resolve; });
  /**
   * For memorize resolve function generated by main promise.
   * @type {[type]}
   */
  private _resolve: () => void;

  /**
   * Register an promise to be waited until finished.
   */
  public register<T>(promise: Promise<T>): Promise<T> {
    this.registerCount++;
    return new Promise<T>((resolve, reject) => {
      (async function() {
        try {
          resolve(await promise);
          this.loadCount++;
        } catch (e) {
          reject(e);
          this.errorCount++;
        }
        this.completeCount++;
        this._checkLoadCompleted();
      }).bind(this)();
    });
  }

  /**
   * Verify all promises are completed.
   */
  private _checkLoadCompleted(): void {
    this.emit("progress", this);
    if (this.registerCount === this.completeCount) {
      this._resolve();
    }
  }
}
export default AssetLoader;
